[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "I wanted to have a website that would automatically display a short joke in the middle of the page. Click the \"Get Another Joke\" button to toggle the display of a joke. Web code (.html, .css, .js) is preferred.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "Sure, I will provide you with the necessary HTML, CSS, and JavaScript files to create a simple website that fetches and displays jokes. The website will have a button that, when clicked, will fetch a new joke and display it on the page.\n\nLet's start with the HTML file:\n\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Joke Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Random Joke Generator</h1>\n        <p id=\"joke\">Loading...</p>\n        <button id=\"new-joke\">Get Another Joke</button>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\nThis is a simple HTML file that includes a title, a paragraph for displaying the joke, and a button for fetching a new joke. It also links to the CSS and JavaScript files we will create next.\n\nNext, let's create the CSS file to style our webpage:\n\nstyles.css\n```css\nbody {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n.container {\n    text-align: center;\n}\n\n#joke {\n    font-size: 24px;\n    margin-bottom: 20px;\n}\n\n#new-joke {\n    font-size: 20px;\n    padding: 10px 20px;\n    cursor: pointer;\n}\n```\n\nThis CSS file styles the webpage to center the content, sets the font, and styles the joke and button elements.\n\nFinally, let's create the JavaScript file that will fetch and display the jokes:\n\nscript.js\n```javascript\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    fetchJoke();\n    document.getElementById('new-joke').addEventListener('click', fetchJoke);\n});\n\nfunction fetchJoke() {\n    fetch('https://official-joke-api.appspot.com/random_joke')\n        .then(response => response.json())\n        .then(data => {\n            document.getElementById('joke').innerText = `${data.setup} ${data.punchline}`;\n        })\n        .catch(error => {\n            console.error('Error:', error);\n            document.getElementById('joke').innerText = 'Failed to fetch a joke. Please try again.';\n        });\n}\n```\n\nThis JavaScript file adds an event listener to the button that fetches a new joke when clicked. It fetches jokes from the Official Joke API and displays them on the webpage. If there's an error fetching a joke, it displays an error message.\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]