To create a Notes App in Python, we will need several classes and functions. Here's a high-level overview of the architecture:

1. `Note` class: This class will represent a single note. It will have properties like `title`, `content`, and `created_at`.

2. `Notebook` class: This class will represent a collection of notes. It will have methods to add, remove, and search for notes.

3. `App` class: This class will be the main entry point of the application. It will handle user input and output, and it will use a `Notebook` instance to perform operations on notes.

4. `main` function: This function will create an instance of the `App` class and start the application.

Now, let's start with the implementation. We'll put each class in its own file.

src/note.py
```python
from dataclasses import dataclass
from datetime import datetime

@dataclass
class Note:
    """A class representing a single note."""
    title: str
    content: str
    created_at: datetime = datetime.now()
```

src/notebook.py
```python
from typing import List
from .note import Note

class Notebook:
    """A class representing a collection of notes."""
    def __init__(self):
        self.notes = []

    def add(self, note: Note):
        """Add a note to the notebook."""
        self.notes.append(note)

    def remove(self, note: Note):
        """Remove a note from the notebook."""
        self.notes.remove(note)

    def search(self, query: str) -> List[Note]:
        """Search for notes that contain the query in their title or content."""
        return [note for note in self.notes if query in note.title or query in note.content]
```

src/app.py
```python
from .note import Note
from .notebook import Notebook

class App:
    """The main application class."""
    def __init__(self):
        self.notebook = Notebook()

    def start(self):
        """Start the application."""
        while True:
            command = input("Enter a command: ")
            if command == "add":
                title = input("Enter the note's title: ")
                content = input("Enter the note's content: ")
                self.notebook.add(Note(title, content))
            elif command == "remove":
                title = input("Enter the title of the note to remove: ")
                note = next((note for note in self.notebook.notes if note.title == title), None)
                if note is not None:
                    self.notebook.remove(note)
                else:
                    print("Note not found.")
            elif command == "search":
                query = input("Enter a search query: ")
                results = self.notebook.search(query)
                for note in results:
                    print(note)
            elif command == "quit":
                break
            else:
                print("Unknown command.")
```

src/main.py
```python
from .app import App

def main():
    """The main function of the application."""
    app = App()
    app.start()

if __name__ == "__main__":
    main()
```

requirements.txt
```
dataclasses==0.6
```

This concludes a fully working implementation.