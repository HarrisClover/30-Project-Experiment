[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "I want to have a website that can read the keyCodes of the keyboard and display event.key, event.keyCode, event.code on the page. Web code (.html, .css, .js) is preferred.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "Sure, I can help you with that. We will need three files for this task: `index.html` for the structure of the webpage, `styles.css` for the styling, and `script.js` for the JavaScript logic that will handle the keyboard events.\n\nLet's start with the HTML structure.\n\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Key Event Display</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <h1>Key Event Display</h1>\n    <div id=\"output\">\n        <p id=\"key\">Key: </p>\n        <p id=\"keyCode\">KeyCode: </p>\n        <p id=\"code\">Code: </p>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\nThis HTML file creates a simple webpage with a title and three paragraphs to display the key, keyCode, and code of the keyboard event. It links to the CSS and JavaScript files we will create next.\n\nNow let's add some basic styling.\n\nstyles.css\n```css\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f0f0;\n}\n\n#output {\n    text-align: center;\n    font-size: 2em;\n}\n\np {\n    margin: 0.5em 0;\n}\n```\nThis CSS file centers the content on the page and applies some basic styling to the text.\n\nFinally, let's write the JavaScript logic to handle the keyboard events.\n\nscript.js\n```javascript\ndocument.addEventListener('keydown', function(event) {\n    document.getElementById('key').textContent = 'Key: ' + event.key;\n    document.getElementById('keyCode').textContent = 'KeyCode: ' + event.keyCode;\n    document.getElementById('code').textContent = 'Code: ' + event.code;\n});\n```\nThis JavaScript file adds an event listener to the document that listens for 'keydown' events. When a keydown event is fired, it updates the text content of the three paragraphs in the HTML to display the key, keyCode, and code of the event.\n\nTo see this in action, you just need to open the `index.html` file in a web browser. When you press a key on your keyboard, you should see the key, keyCode, and code displayed on the webpage.\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]