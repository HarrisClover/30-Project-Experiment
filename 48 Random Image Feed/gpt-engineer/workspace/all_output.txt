To achieve this, we will use Python with Flask as the web framework and Jinja2 for the templating engine. We will also use Bootstrap for the frontend to make the table look nice.

Here are the core classes, functions, and methods that will be necessary:

1. `app.py`: This is the main entry point of our application. It will contain the Flask application and the route to our webpage.

2. `templates/index.html`: This is the Jinja2 template for our webpage. It will contain the HTML and Jinja2 code to display the pictures in a table.

3. `static/images/`: This directory will contain the images that we want to display.

4. `requirements.txt`: This file will contain all the Python dependencies that our application needs.

Let's start with the `app.py` file:

app.py
```python
from flask import Flask, render_template
import os
import random

app = Flask(__name__)

@app.route('/')
def home():
    # Get a list of all the images in the static/images directory
    images = os.listdir('static/images')

    # Randomly shuffle the images
    random.shuffle(images)

    # Split the images into rows of 4 for the table
    image_rows = [images[i:i+4] for i in range(0, len(images), 4)]

    # Render the index.html template with the image_rows variable
    return render_template('index.html', image_rows=image_rows)

if __name__ == '__main__':
    app.run(debug=True)
```

Next, let's create the `index.html` template:

templates/index.html
```html
<!DOCTYPE html>
<html>
<head>
    <title>Random Image Display</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css">
</head>
<body>
    <div class="container">
        <h1 class="mt-5">Random Image Display</h1>
        <table class="table mt-5">
            {% for row in image_rows %}
            <tr>
                {% for image in row %}
                <td><img src="{{ url_for('static', filename='images/' + image) }}" class="img-fluid"></td>
                {% endfor %}
            </tr>
            {% endfor %}
        </table>
    </div>
</body>
</html>
```

Finally, let's create the `requirements.txt` file:

requirements.txt
```
Flask==1.1.2
```

To run the application, you need to install the requirements with `pip install -r requirements.txt`, then run `python app.py`. The application will be available at `http://localhost:5000`.

This concludes a fully working implementation.