[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "The task is a web page that displays a field for entering a verification code. It prompts the user to enter a 6-digit code, which is sent to their email address \"cool_guy@email.com\" to confirm the email address.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "To implement this task, we will use Flask, a micro web framework written in Python. We will also use the smtplib for sending emails in Python. The project will be structured as follows:\n\n- A main application file that will serve as the entry point of our application.\n- A templates directory that will contain our HTML templates.\n- A static directory that will contain our CSS files for styling.\n- A requirements.txt file that will list all the Python dependencies that our project needs.\n\nLet's start with the main application file:\n\napp.py\n```python\nfrom flask import Flask, render_template, request, redirect, url_for, flash\nimport smtplib\nimport random\n\napp = Flask(__name__)\napp.secret_key = 'supersecretkey'\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        email = request.form['email']\n        code = generate_verification_code()\n        send_email(email, code)\n        flash('A verification code has been sent to your email address.', 'info')\n        return redirect(url_for('verify', email=email))\n    return render_template('home.html')\n\n@app.route('/verify', methods=['GET', 'POST'])\ndef verify():\n    if request.method == 'POST':\n        code = request.form['code']\n        if code == request.args.get('code'):\n            flash('Email verified successfully.', 'success')\n            return redirect(url_for('home'))\n        else:\n            flash('Invalid verification code.', 'danger')\n            return redirect(url_for('verify'))\n    return render_template('verify.html')\n\ndef generate_verification_code():\n    return ''.join(random.choice('0123456789') for _ in range(6))\n\ndef send_email(to, code):\n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.starttls()\n    server.login('your-email@gmail.com', 'your-password')\n    message = 'Your verification code is: {}'.format(code)\n    server.sendmail('your-email@gmail.com', to, message)\n    server.quit()\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nNext, let's create our HTML templates:\n\ntemplates/home.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Verification Code</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n</head>\n<body>\n    <form method=\"POST\">\n        <input type=\"email\" name=\"email\" placeholder=\"Enter your email\" required>\n        <button type=\"submit\">Send Verification Code</button>\n    </form>\n</body>\n</html>\n```\n\ntemplates/verify.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Verify Email</title>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n</head>\n<body>\n    <form method=\"POST\">\n        <input type=\"text\" name=\"code\" placeholder=\"Enter verification code\" required>\n        <button type=\"submit\">Verify</button>\n    </form>\n</body>\n</html>\n```\n\nNext, let's create our CSS file:\n\nstatic/style.css\n```css\nbody {\n    font-family: Arial, sans-serif;\n}\n\nform {\n    width: 300px;\n    margin: 0 auto;\n}\n\ninput, button {\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 10px;\n}\n```\n\nFinally, let's create our requirements.txt file:\n\nrequirements.txt\n```\nFlask==1.1.2\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]