[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "This front-end code implements a Github user search application where users can enter a Github username in the input field and view the user's basic information and repository list.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "The application will be built using React.js and will interact with the Github API to fetch the user data. The application will consist of the following components:\n\n1. App.js: This is the main component of the application that will contain the search bar and the user profile component.\n\n2. SearchBar.js: This component will contain the input field and the search button.\n\n3. UserProfile.js: This component will display the user's basic information and the list of repositories.\n\n4. RepositoryList.js: This component will display the list of repositories of the user.\n\n5. Repository.js: This component will display the individual repository details.\n\n6. GithubService.js: This service will interact with the Github API to fetch the user data.\n\n7. index.js: This is the entry point of the application.\n\n8. package.json: This file will contain all the dependencies required for the application.\n\nsrc/index.js\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nsrc/App.js\n```javascript\nimport React from 'react';\nimport SearchBar from './SearchBar';\nimport UserProfile from './UserProfile';\n\nclass App extends React.Component {\n  state = { user: null };\n\n  onSearchSubmit = (user) => {\n    this.setState({ user });\n  }\n\n  render() {\n    return (\n      <div className=\"ui container\">\n        <SearchBar onSubmit={this.onSearchSubmit} />\n        <UserProfile user={this.state.user} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n```\n\nsrc/SearchBar.js\n```javascript\nimport React from 'react';\nimport GithubService from './GithubService';\n\nclass SearchBar extends React.Component {\n  state = { term: '' };\n\n  onFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const response = await GithubService.get(`/users/${this.state.term}`);\n    this.props.onSubmit(response.data);\n  }\n\n  render() {\n    return (\n      <div className=\"ui segment\">\n        <form onSubmit={this.onFormSubmit} className=\"ui form\">\n          <div className=\"field\">\n            <label>Github User Search</label>\n            <input\n              type=\"text\"\n              value={this.state.term}\n              onChange={(e) => this.setState({ term: e.target.value })}\n            />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n```\n\nsrc/UserProfile.js\n```javascript\nimport React from 'react';\nimport RepositoryList from './RepositoryList';\n\nconst UserProfile = ({ user }) => {\n  if (!user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>{user.bio}</p>\n      <RepositoryList repos_url={user.repos_url} />\n    </div>\n  );\n};\n\nexport default UserProfile;\n```\n\nsrc/RepositoryList.js\n```javascript\nimport React from 'react';\nimport GithubService from './GithubService';\nimport Repository from './Repository';\n\nclass RepositoryList extends React.Component {\n  state = { repos: [] };\n\n  async componentDidMount() {\n    const response = await GithubService.get(this.props.repos_url);\n    this.setState({ repos: response.data });\n  }\n\n  render() {\n    const renderedList = this.state.repos.map((repo) => {\n      return <Repository key={repo.id} repo={repo} />;\n    });\n\n    return <div>{renderedList}</div>;\n  }\n}\n\nexport default RepositoryList;\n```\n\nsrc/Repository.js\n```javascript\nimport React from 'react';\n\nconst Repository = ({ repo }) => {\n  return (\n    <div>\n      <h2>{repo.name}</h2>\n      <p>{repo.description}</p>\n    </div>\n  );\n};\n\nexport default Repository;\n```\n\nsrc/GithubService.js\n```javascript\nimport axios from 'axios';\n\nexport default axios.create({\n  baseURL: 'https://api.github.com',\n});\n```\n\npackage.json\n```json\n{\n  \"name\": \"github-user-search\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple Github user search application\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^0.21.1\",\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"react-scripts\": \"4.0.3\"\n  },\n  \"devDependencies\": {},\n  \"keywords\": [\"github\", \"user\", \"search\"],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]