The application will be built using React.js and will interact with the Github API to fetch the user data. The application will consist of the following components:

1. App.js: This is the main component of the application that will contain the search bar and the user profile component.

2. SearchBar.js: This component will contain the input field and the search button.

3. UserProfile.js: This component will display the user's basic information and the list of repositories.

4. RepositoryList.js: This component will display the list of repositories of the user.

5. Repository.js: This component will display the individual repository details.

6. GithubService.js: This service will interact with the Github API to fetch the user data.

7. index.js: This is the entry point of the application.

8. package.json: This file will contain all the dependencies required for the application.

src/index.js
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

src/App.js
```javascript
import React from 'react';
import SearchBar from './SearchBar';
import UserProfile from './UserProfile';

class App extends React.Component {
  state = { user: null };

  onSearchSubmit = (user) => {
    this.setState({ user });
  }

  render() {
    return (
      <div className="ui container">
        <SearchBar onSubmit={this.onSearchSubmit} />
        <UserProfile user={this.state.user} />
      </div>
    );
  }
}

export default App;
```

src/SearchBar.js
```javascript
import React from 'react';
import GithubService from './GithubService';

class SearchBar extends React.Component {
  state = { term: '' };

  onFormSubmit = async (event) => {
    event.preventDefault();

    const response = await GithubService.get(`/users/${this.state.term}`);
    this.props.onSubmit(response.data);
  }

  render() {
    return (
      <div className="ui segment">
        <form onSubmit={this.onFormSubmit} className="ui form">
          <div className="field">
            <label>Github User Search</label>
            <input
              type="text"
              value={this.state.term}
              onChange={(e) => this.setState({ term: e.target.value })}
            />
          </div>
        </form>
      </div>
    );
  }
}

export default SearchBar;
```

src/UserProfile.js
```javascript
import React from 'react';
import RepositoryList from './RepositoryList';

const UserProfile = ({ user }) => {
  if (!user) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.bio}</p>
      <RepositoryList repos_url={user.repos_url} />
    </div>
  );
};

export default UserProfile;
```

src/RepositoryList.js
```javascript
import React from 'react';
import GithubService from './GithubService';
import Repository from './Repository';

class RepositoryList extends React.Component {
  state = { repos: [] };

  async componentDidMount() {
    const response = await GithubService.get(this.props.repos_url);
    this.setState({ repos: response.data });
  }

  render() {
    const renderedList = this.state.repos.map((repo) => {
      return <Repository key={repo.id} repo={repo} />;
    });

    return <div>{renderedList}</div>;
  }
}

export default RepositoryList;
```

src/Repository.js
```javascript
import React from 'react';

const Repository = ({ repo }) => {
  return (
    <div>
      <h2>{repo.name}</h2>
      <p>{repo.description}</p>
    </div>
  );
};

export default Repository;
```

src/GithubService.js
```javascript
import axios from 'axios';

export default axios.create({
  baseURL: 'https://api.github.com',
});
```

package.json
```json
{
  "name": "github-user-search",
  "version": "1.0.0",
  "description": "A simple Github user search application",
  "main": "index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "axios": "^0.21.1",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "devDependencies": {},
  "keywords": ["github", "user", "search"],
  "author": "",
  "license": "ISC"
}
```

This concludes a fully working implementation.