[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nThe application will be built using React.js, a popular JavaScript library for building user interfaces. We will use the Fetch API to make requests to the Github API. \n\nHere are the core files and their purposes:\n\n1. `package.json`: This file will contain the project metadata and the list of dependencies required by the project.\n\n2. `src/index.js`: This is the entry point of the application. It will render the main `App` component.\n\n3. `src/App.js`: This is the main component of the application. It will contain the search bar and the user profile component.\n\n4. `src/components/SearchBar.js`: This component will contain the input field and the search button.\n\n5. `src/components/UserProfile.js`: This component will display the user's basic information and the list of repositories.\n\n6. `src/components/Repository.js`: This component will display the information of a single repository.\n\n7. `src/utils/api.js`: This file will contain the function to make requests to the Github API.\n\nNow, let's start with the `package.json` file:\n\npackage.json\n```json\n{\n  \"name\": \"github-user-search\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Github user search application built with React.js\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"dependencies\": {\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"react-scripts\": \"4.0.3\"\n  },\n  \"devDependencies\": {},\n  \"keywords\": [\"react\", \"github\", \"search\"],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nNext, the `src/index.js` file:\n\nsrc/index.js\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nThe `src/App.js` file:\n\nsrc/App.js\n```javascript\nimport React, { useState } from 'react';\nimport SearchBar from './components/SearchBar';\nimport UserProfile from './components/UserProfile';\nimport { getUserData } from './utils/api';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  const handleSearch = async (username) => {\n    const data = await getUserData(username);\n    setUser(data);\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBar onSearch={handleSearch} />\n      {user && <UserProfile user={user} />}\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThe `src/components/SearchBar.js` file:\n\nsrc/components/SearchBar.js\n```javascript\nimport React, { useState } from 'react';\n\nfunction SearchBar({ onSearch }) {\n  const [username, setUsername] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSearch(username);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Enter Github username\"\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nexport default SearchBar;\n```\n\nThe `src/components/UserProfile.js` file:\n\nsrc/components/UserProfile.js\n```javascript\nimport React from 'react';\nimport Repository from './Repository';\n\nfunction UserProfile({ user }) {\n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>{user.bio}</p>\n      <ul>\n        {user.repositories.map((repo) => (\n          <Repository key={repo.id} repo={repo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default UserProfile;\n```\n\nThe `src/components/Repository.js` file:\n\nsrc/components/Repository.js\n```javascript\nimport React from 'react';\n\nfunction Repository({ repo }) {\n  return (\n    <li>\n      <h3>{repo.name}</h3>\n      <p>{repo.description}</p>\n    </li>\n  );\n}\n\nexport default Repository;\n```\n\nFinally, the `src/utils/api.js` file:\n\nsrc/utils/api.js\n```javascript\nconst API_URL = 'https://api.github.com';\n\nexport async function getUserData(username) {\n  const response = await fetch(`${API_URL}/users/${username}`);\n  const data = await response.json();\n\n  const reposResponse = await fetch(data.repos_url);\n  const repos = await reposResponse.json();\n\n  return {\n    ...data,\n    repositories: repos,\n  };\n}\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "```bash\nnpm install\n```\n\n```bash\nnpm start\n```", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]