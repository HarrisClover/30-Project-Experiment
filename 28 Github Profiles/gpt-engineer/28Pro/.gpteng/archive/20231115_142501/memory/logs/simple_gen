[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "This front-end code implements a Github user search application where users can enter a Github username in the input field and view the user's basic information and repository list.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "The application will be built using React.js, a popular JavaScript library for building user interfaces. We will use the Fetch API to make requests to the Github API. \n\nHere are the core files and their purposes:\n\n1. `package.json`: This file will contain the project metadata and the list of dependencies required by the project.\n\n2. `src/index.js`: This is the entry point of the application. It will render the main `App` component.\n\n3. `src/App.js`: This is the main component of the application. It will contain the search bar and the user profile component.\n\n4. `src/components/SearchBar.js`: This component will contain the input field and the search button.\n\n5. `src/components/UserProfile.js`: This component will display the user's basic information and the list of repositories.\n\n6. `src/components/Repository.js`: This component will display the information of a single repository.\n\n7. `src/utils/api.js`: This file will contain the function to make requests to the Github API.\n\nNow, let's start with the `package.json` file:\n\npackage.json\n```json\n{\n  \"name\": \"github-user-search\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A Github user search application built with React.js\",\n  \"main\": \"src/index.js\",\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"dependencies\": {\n    \"react\": \"^17.0.2\",\n    \"react-dom\": \"^17.0.2\",\n    \"react-scripts\": \"4.0.3\"\n  },\n  \"devDependencies\": {},\n  \"keywords\": [\"react\", \"github\", \"search\"],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\n\nNext, the `src/index.js` file:\n\nsrc/index.js\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\nThe `src/App.js` file:\n\nsrc/App.js\n```javascript\nimport React, { useState } from 'react';\nimport SearchBar from './components/SearchBar';\nimport UserProfile from './components/UserProfile';\nimport { getUserData } from './utils/api';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  const handleSearch = async (username) => {\n    const data = await getUserData(username);\n    setUser(data);\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchBar onSearch={handleSearch} />\n      {user && <UserProfile user={user} />}\n    </div>\n  );\n}\n\nexport default App;\n```\n\nThe `src/components/SearchBar.js` file:\n\nsrc/components/SearchBar.js\n```javascript\nimport React, { useState } from 'react';\n\nfunction SearchBar({ onSearch }) {\n  const [username, setUsername] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    onSearch(username);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={username}\n        onChange={(e) => setUsername(e.target.value)}\n        placeholder=\"Enter Github username\"\n      />\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n}\n\nexport default SearchBar;\n```\n\nThe `src/components/UserProfile.js` file:\n\nsrc/components/UserProfile.js\n```javascript\nimport React from 'react';\nimport Repository from './Repository';\n\nfunction UserProfile({ user }) {\n  return (\n    <div>\n      <h2>{user.name}</h2>\n      <p>{user.bio}</p>\n      <ul>\n        {user.repositories.map((repo) => (\n          <Repository key={repo.id} repo={repo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default UserProfile;\n```\n\nThe `src/components/Repository.js` file:\n\nsrc/components/Repository.js\n```javascript\nimport React from 'react';\n\nfunction Repository({ repo }) {\n  return (\n    <li>\n      <h3>{repo.name}</h3>\n      <p>{repo.description}</p>\n    </li>\n  );\n}\n\nexport default Repository;\n```\n\nFinally, the `src/utils/api.js` file:\n\nsrc/utils/api.js\n```javascript\nconst API_URL = 'https://api.github.com';\n\nexport async function getUserData(username) {\n  const response = await fetch(`${API_URL}/users/${username}`);\n  const data = await response.json();\n\n  const reposResponse = await fetch(data.repos_url);\n  const repos = await reposResponse.json();\n\n  return {\n    ...data,\n    repositories: repos,\n  };\n}\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]