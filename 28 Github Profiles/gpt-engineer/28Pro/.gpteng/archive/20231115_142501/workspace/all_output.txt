The application will be built using React.js, a popular JavaScript library for building user interfaces. We will use the Fetch API to make requests to the Github API. 

Here are the core files and their purposes:

1. `package.json`: This file will contain the project metadata and the list of dependencies required by the project.

2. `src/index.js`: This is the entry point of the application. It will render the main `App` component.

3. `src/App.js`: This is the main component of the application. It will contain the search bar and the user profile component.

4. `src/components/SearchBar.js`: This component will contain the input field and the search button.

5. `src/components/UserProfile.js`: This component will display the user's basic information and the list of repositories.

6. `src/components/Repository.js`: This component will display the information of a single repository.

7. `src/utils/api.js`: This file will contain the function to make requests to the Github API.

Now, let's start with the `package.json` file:

package.json
```json
{
  "name": "github-user-search",
  "version": "1.0.0",
  "description": "A Github user search application built with React.js",
  "main": "src/index.js",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "devDependencies": {},
  "keywords": ["react", "github", "search"],
  "author": "",
  "license": "ISC"
}
```

Next, the `src/index.js` file:

src/index.js
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
```

The `src/App.js` file:

src/App.js
```javascript
import React, { useState } from 'react';
import SearchBar from './components/SearchBar';
import UserProfile from './components/UserProfile';
import { getUserData } from './utils/api';

function App() {
  const [user, setUser] = useState(null);

  const handleSearch = async (username) => {
    const data = await getUserData(username);
    setUser(data);
  };

  return (
    <div className="App">
      <SearchBar onSearch={handleSearch} />
      {user && <UserProfile user={user} />}
    </div>
  );
}

export default App;
```

The `src/components/SearchBar.js` file:

src/components/SearchBar.js
```javascript
import React, { useState } from 'react';

function SearchBar({ onSearch }) {
  const [username, setUsername] = useState('');

  const handleSubmit = (event) => {
    event.preventDefault();
    onSearch(username);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        value={username}
        onChange={(e) => setUsername(e.target.value)}
        placeholder="Enter Github username"
      />
      <button type="submit">Search</button>
    </form>
  );
}

export default SearchBar;
```

The `src/components/UserProfile.js` file:

src/components/UserProfile.js
```javascript
import React from 'react';
import Repository from './Repository';

function UserProfile({ user }) {
  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.bio}</p>
      <ul>
        {user.repositories.map((repo) => (
          <Repository key={repo.id} repo={repo} />
        ))}
      </ul>
    </div>
  );
}

export default UserProfile;
```

The `src/components/Repository.js` file:

src/components/Repository.js
```javascript
import React from 'react';

function Repository({ repo }) {
  return (
    <li>
      <h3>{repo.name}</h3>
      <p>{repo.description}</p>
    </li>
  );
}

export default Repository;
```

Finally, the `src/utils/api.js` file:

src/utils/api.js
```javascript
const API_URL = 'https://api.github.com';

export async function getUserData(username) {
  const response = await fetch(`${API_URL}/users/${username}`);
  const data = await response.json();

  const reposResponse = await fetch(data.repos_url);
  const repos = await reposResponse.json();

  return {
    ...data,
    repositories: repos,
  };
}
```

This concludes a fully working implementation.