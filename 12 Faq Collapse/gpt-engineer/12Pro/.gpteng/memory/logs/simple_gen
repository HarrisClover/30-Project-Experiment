[{"type": "system", "data": {"content": "You will get instructions for code to write.\nYou will write a very long answer. Make sure that every detail of the architecture is, in the end, implemented as code.\nThink step by step and reason yourself to the correct decisions to make sure we get it right.\nFirst lay out the names of the core classes, functions, methods that will be necessary, As well as a quick comment on their purpose.\n\nYou will output the content of each file necessary to achieve the goal, including ALL code.\nRepresent files like so:\n\nFILENAME\n```\nCODE\n```\n\nThe following tokens must be replaced like so:\nFILENAME is the lowercase combined path and file name including the file extension\nCODE is the code in the file\n\nExample representation of a file:\n\nsrc/hello_world.py\n```\nprint(\"Hello World\")\n```\n\nDo not comment on what every file does. Please note that the code should be fully functional. No placeholders.\n\n\nYou will start with the \"entrypoint\" file, then go to the ones that are imported by that file, and so on.\nPlease note that the code should be fully functional. No placeholders.\n\nFollow a language and framework appropriate best practice file naming convention.\nMake sure that files contain all imports, types etc.  The code should be fully functional. Make sure that code in different files are compatible with each other.\nEnsure to implement all code, if you are unsure, write a plausible implementation.\nInclude module dependency or package manager dependency definition file.\nBefore you finish, double check that all parts of the architecture is present in the files.\n\nWhen you are done, write finish with \"this concludes a fully working implementation\".\n\nUseful to know:\nAlmost always put different classes in different files.\nAlways use the programming language the user asks for.\nFor Python, you always create an appropriate requirements.txt file.\nFor NodeJS, you always create an appropriate package.json file.\nAlways add a comment briefly describing the purpose of the function definition.\nAdd comments explaining very complex bits of logic.\nAlways follow the best practices for the requested languages for folder/file structure and how to package the project.\n\n\nPython toolbelt preferences:\n- pytest\n- dataclasses\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "I needed a web page to display the FAQ section, with a drop-down arrow for each question to show or hide the answer. Web code (.html, .css, .js) is preferred.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "Sure, let's create a simple webpage with a FAQ section using HTML, CSS, and JavaScript. \n\nFirst, we will create the HTML structure for the FAQ section. Each question will be a clickable element that will show or hide the corresponding answer when clicked.\n\nindex.html\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>FAQ Page</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"faq-section\">\n        <h1>FAQs</h1>\n        <div class=\"faq\">\n            <h2 class=\"faq-question\">Question 1?</h2>\n            <p class=\"faq-answer\">Answer to question 1</p>\n        </div>\n        <div class=\"faq\">\n            <h2 class=\"faq-question\">Question 2?</h2>\n            <p class=\"faq-answer\">Answer to question 2</p>\n        </div>\n        <!-- Add more questions as needed -->\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\nNext, we will create the CSS file to style the FAQ section. Initially, all answers will be hidden.\n\nstyles.css\n```css\n.faq-section {\n    width: 50%;\n    margin: auto;\n}\n\n.faq-question {\n    cursor: pointer;\n}\n\n.faq-answer {\n    display: none;\n    margin-left: 20px;\n}\n```\n\nFinally, we will create the JavaScript file to add the functionality to show or hide the answers when the questions are clicked.\n\nscript.js\n```javascript\nwindow.onload = function() {\n    var faqs = document.getElementsByClassName('faq');\n\n    for (var i = 0; i < faqs.length; i++) {\n        faqs[i].addEventListener('click', function() {\n            this.children[1].style.display = this.children[1].style.display == 'none' ? 'block' : 'none';\n        });\n    }\n};\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]