[{"type": "system", "data": {"content": "You will get information about a codebase that is currently on disk in the current folder.\nFrom this you will answer with code blocks that includes all the necessary unix terminal commands to a) install dependencies b) run all necessary parts of the codebase (in parallel if necessary).\nDo not install globally. Do not use sudo.\nDo not explain the code, just give the commands.\nDo not use placeholders, use example values (like . for a folder argument) if necessary.\n", "additional_kwargs": {}, "type": "system"}}, {"type": "human", "data": {"content": "Information about the codebase:\n\nLet's start with the project structure. We will have the following files:\n\n- `main.py`: This is the entry point of our application.\n- `password_generator.py`: This file will contain the logic for generating the password.\n- `requirements.txt`: This file will list all the Python dependencies that our project needs.\n\nNow, let's start with the content of each file.\n\nmain.py\n```python\nfrom flask import Flask, request, jsonify\nfrom password_generator import PasswordGenerator\n\napp = Flask(__name__)\n\n@app.route('/generate-password', methods=['POST'])\ndef generate_password():\n    # Get the user's preferences from the request body\n    preferences = request.get_json()\n\n    # Validate the preferences\n    if not all(key in preferences for key in ['length', 'use_uppercase', 'use_lowercase', 'use_numbers']):\n        return jsonify({'error': 'Missing preferences'}), 400\n\n    # Generate the password\n    password_generator = PasswordGenerator(\n        length=preferences['length'],\n        use_uppercase=preferences['use_uppercase'],\n        use_lowercase=preferences['use_lowercase'],\n        use_numbers=preferences['use_numbers']\n    )\n    password = password_generator.generate()\n\n    return jsonify({'password': password})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\npassword_generator.py\n```python\nimport random\nimport string\n\nclass PasswordGenerator:\n    def __init__(self, length, use_uppercase, use_lowercase, use_numbers):\n        self.length = length\n        self.use_uppercase = use_uppercase\n        self.use_lowercase = use_lowercase\n        self.use_numbers = use_numbers\n\n    def generate(self):\n        # Define the characters that can be used in the password\n        characters = ''\n        if self.use_uppercase:\n            characters += string.ascii_uppercase\n        if self.use_lowercase:\n            characters += string.ascii_lowercase\n        if self.use_numbers:\n            characters += string.digits\n\n        # Generate the password\n        password = ''.join(random.choice(characters) for _ in range(self.length))\n\n        return password\n```\n\nrequirements.txt\n```\nflask==1.1.2\n```\n\nThis concludes a fully working implementation.", "additional_kwargs": {}, "type": "human", "example": false}}, {"type": "AIMessageChunk", "data": {"content": "```bash\npython3 -m venv venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n```bash\nFLASK_APP=main.py flask run &\n```", "additional_kwargs": {}, "type": "AIMessageChunk", "example": false}}]